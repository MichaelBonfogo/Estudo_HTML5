JavaScript HTML DOM
 Com o HTML DOM, o JavaScript pode acessar e alterar todos os elementos de um documento HTML.

 O HTML DOM (Document Object Model)
 Quando uma página da web é carregado, o navegador cria um D ocument O bject M odelo da página.

 O modelo HTML DOM é construído como uma árvore de objetos :

Com o modelo de objeto, o JavaScript obtém todo o poder de que precisa para criar HTML dinâmico:
 JavaScript pode alterar todos os elementos HTML na página
 JavaScript pode alterar todos os atributos HTML na página
 JavaScript pode mudar todos os estilos CSS na página
 JavaScript pode remover elementos e atributos HTML existentes
 JavaScript pode adicionar novos elementos e atributos HTML
 JavaScript pode reagir a todos os eventos HTML existentes na página
 JavaScript pode criar novos eventos HTML na página

O que você aprenderá
Nos próximos capítulos deste tutorial, você aprenderá:
 Como alterar o conteúdo dos elementos HTML
 Como alterar o estilo (CSS) dos elementos HTML
 Como reagir a eventos HTML DOM
 Como adicionar e excluir elementos HTML

Qual é o DOM?
 O DOM é um padrão W3C (World Wide Web Consortium).
 O DOM define um padrão para acessar documentos:
 "O Document Object Model (DOM) do W3C é uma interface de plataforma e linguagem neutra que permite que programas e scripts acessem e atualizem dinamicamente o conteúdo, a estrutura e o estilo de um documento."

O padrão W3C DOM é separado em 3 partes diferentes:
 Core DOM - modelo padrão para todos os tipos de documentos
 XML DOM - modelo padrão para documentos XML
 HTML DOM - modelo padrão para documentos HTML

O que é HTML DOM?
 O HTML DOM é um modelo de objeto padrão e interface de programação para HTML. Ele define:
 Os elementos HTML como objetos
 As propriedades de todos os elementos HTML
 Os métodos para acessar todos os elementos HTML
 Os eventos para todos os elementos HTML
Em outras palavras: o HTML DOM é um padrão de como obter, alterar, adicionar ou excluir elementos HTML.
----------------------------------------------------------------------
----------------------------------------------------------------------

JavaScript - Métodos HTML DOM
 Os métodos HTML DOM são ações que você pode executar (em elementos HTML).
 As propriedades HTML DOM são valores (de elementos HTML) que você pode definir ou alterar.

A Interface de Programação DOM
 O HTML DOM pode ser acessado com JavaScript (e com outras linguagens de programação).
 No DOM, todos os elementos HTML são definidos como objetos .
 A interface de programação são as propriedades e métodos de cada objeto.
 Uma propriedade é um valor que você pode obter ou definir (como alterar o conteúdo de um elemento HTML).
 Um método é uma ação que você pode realizar (como adicionar ou excluir um elemento HTML).

Exemplo
O exemplo a seguir altera o conteúdo (o innerHTML) do <p>elemento com id="demo":

Exemplo
<!DOCTYPE html>
<html>
<body>

<h2>My First Page</h2>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = "Hello World!";
</script>

</body>
</html>

No exemplo acima, getElementByIdé um método , enquanto innerHTMLé uma propriedade .
 document.getElementById("demo").innerHTML = "Hello World!";
 objetoPrincipal.Metodo.Propriedade = "Valor";

O método getElementById
 A maneira mais comum de acessar um elemento HTML é usar o id do elemento.
 No exemplo acima, o getElementById método usado id="demo" para encontrar o elemento.
 
A propriedade innerHTML
 A maneira mais fácil de obter o conteúdo de um elemento é usando a innerHTML propriedade.
 A innerHTML propriedade é útil para obter ou substituir o conteúdo de elementos HTML.
 A innerHTML propriedade pode ser usada para obter ou alterar qualquer elemento HTML, incluindo <html> e <body>.

----------------------------------------------------------------------
----------------------------------------------------------------------

Documento HTML DOM JavaScript
 O objeto de documento HTML DOM é o proprietário de todos os outros objetos em sua página da web.

O objeto de documento HTML DOM
 O objeto de documento representa sua página da web.
 Se você deseja acessar qualquer elemento em uma página HTML, sempre comece acessando o objeto de documento.
 
 Abaixo estão alguns exemplos de como você pode usar o objeto de documento para acessar e manipular HTML.

Encontrando Elementos HTML
Method -	Description
document.getElementById(id) - Find an element by element id
document.getElementsByTagName(name) -	Find elements by tag name
document.getElementsByClassName(name) -	Find elements by class name

Alterando - Elementos HTML
Property -	Description
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element

Method -	Description
element.setAttribute(attribute, value) -	Change the attribute value of an HTML element

Adicionando e Excluindo Elementos
Method	- Description
document.createElement(element) -	Create an HTML element
document.removeChild(element) -	Remove an HTML element
document.appendChild(element) -	Add an HTML element
document.replaceChild(new, old) - 	Replace an HTML element
document.write(text) -	Write into the HTML output stream

Adicionar manipuladores de eventos
Method -	Description
document.getElementById(id).onclick = function(){code} -	Adding event handler code to an onclick event

Encontrar objetos HTML
 O primeiro HTML DOM Nível 1 (1998), definiu 11 objetos HTML, coleções de objetos e propriedades. Eles ainda são válidos em HTML5.
 Posteriormente, no HTML DOM Nível 3, mais objetos, coleções e propriedades foram adicionados.
----------------------------------------------------------------------
----------------------------------------------------------------------

Elementos JavaScript HTML DOM
 Esta página ensina como localizar e acessar elementos HTML em uma página HTML.

Encontrando Elementos HTML
 Freqüentemente, com JavaScript, você deseja manipular elementos HTML.

Para fazer isso, você deve primeiro encontrar os elementos. Existem várias maneiras de fazer isso:
 Encontrar elementos HTML por id
 Encontrar elementos HTML por nome de tag
 Encontrar elementos HTML por nome de classe
 Encontrar elementos HTML por seletores CSS
 Encontrar elementos HTML por coleções de objetos HTML

Encontrando Elemento HTML por Id
 A maneira mais fácil de encontrar um elemento HTML no DOM é usando o id do elemento.

Este exemplo encontra o elemento com id="intro":

Exemplo
var myElement = document.getElementById("intro");

Exemplo
<!DOCTYPE html>
<html>
<body>

<h2>Finding HTML Elements by Id</h2>

<p id="intro">Hello World!</p>
<p>This example demonstrates the <b>getElementsById</b> method.</p>

<p id="demo"></p>

<script>
var myElement = document.getElementById("intro");
document.getElementById("demo").innerHTML = 
"The text from the intro paragraph is " + myElement.innerHTML;
</script>

</body>
</html>

 Se o elemento for encontrado, o método retornará o elemento como um objeto (em myElement).
 Se o elemento não for encontrado, myElement conterá null.
----------------------------------------------------------------------

Localização de elementos HTML por nome de tag
 Este exemplo encontra todos os <p>elementos:

Exemplo
var x = document.getElementsByTagName("p");

Exemplo
<!DOCTYPE html>
<html>
<body>

<h2>Finding HTML Elements by Tag Name</h2>

<p>Hello World!</p>
<p>This example demonstrates the <b>getElementsByTagName</b> method.</p>

<p id="demo"></p>

<script>
var x = document.getElementsByTagName("p");
document.getElementById("demo").innerHTML = 
'The text in first paragraph (index 0) is: ' + x[0].innerHTML;
</script>

</body>
</html>

Este exemplo encontra o elemento com id="main"e, em seguida, encontra todos os <p>elementos dentro de "main":

Exemplo
var x = document.getElementById("main");
var y = x.getElementsByTagName("p");

Exemplo
<!DOCTYPE html>
<html>
<body>

<h2>Finding HTML Elements by Tag Name</h2>

<div id="main">
<p>The DOM is very useful.</p>
<p>This example demonstrates the <b>getElementsByTagName</b> method.</p>
</div>

<p id="demo"></p>

<script>
var x = document.getElementById("main");
var y = x.getElementsByTagName("p");
document.getElementById("demo").innerHTML = 
'The first paragraph (index 0) inside "main" is: ' + y[0].innerHTML;
</script>

</body>
</html>

----------------------------------------------------------------------

Encontrando Elementos HTML por Nome de Classe
 Se você quiser encontrar todos os elementos HTML com o mesmo nome de classe, use getElementsByClassName().
 Este exemplo retorna uma lista de todos os elementos com class="intro".

Exemplo
var x = document.getElementsByClassName("intro");

Exemplo
<!DOCTYPE html>
<html>
<body>

<h2>Finding HTML Elements by Class Name</h2>

<p>Hello World!</p>

<p class="intro">The DOM is very useful.</p>
<p class="intro">This example demonstrates the <b>getElementsByClassName</b> method.</p>

<p id="demo"></p>

<script>
var x = document.getElementsByClassName("intro");
document.getElementById("demo").innerHTML = 'The first paragraph (index 0) with class="intro": ' + x[0].innerHTML;
</script>

</body>
</html>

----------------------------------------------------------------------

Encontrar elementos HTML por seletores CSS
 Se você deseja encontrar todos os elementos HTML que correspondem a um seletor CSS especificado (id, nomes de classes, tipos, atributos, valores de atributos, etc), use o querySelectorAll()método.
 Este exemplo retorna uma lista de todos os <p>elementos com class="intro".

Exemplo
var x = document.querySelectorAll("p.intro");

Exemplo
<!DOCTYPE html>
<html>
<body>

<h2>Finding HTML Elements by Query Selector</h2>

<p>Hello World!</p>

<p class="intro">The DOM is very useful.</p>
<p class="intro">This example demonstrates the <b>querySelectorAll</b> method.</p>

<p id="demo"></p>

<script>
var x = document.querySelectorAll("p.intro");
document.getElementById("demo").innerHTML = 
'The first paragraph (index 0) with class="intro": ' + x[0].innerHTML;
</script>

</body>
</html>

obs: O querySelectorAll()método não funciona no Internet Explorer 8 e em versões anteriores.

----------------------------------------------------------------

Encontrando Elementos HTML por Coleções de Objetos HTML